#!/usr/bin/env python3
import os, sys
import curses
import atexit
import threading
import difflib

class WatchCycles:
	def __init__(self, input_stream, marker):
		self.input_stream = input_stream
		self.marker = marker

		self.old_display_index = -1
		self.current_pad_lines = 0

		self.height = lambda: curses.LINES - 1
		self.width = lambda: curses.COLS - 1

		self.display_index = 0
		self.scroll = 0
		self.history = []
		self.page = []

		self.color_normal = 1
		self.color_different = 2
		self.color_linedifferent = 3

		self.inscreen = False

	def current_page(self, offset=0):
		index = self.display_index + offset
		if index == 0:
		 	return self.page
		elif index - 1 < len(self.history):
			return self.history[-index]
		return ["No content"]

	def run(self):
		self.thread_stdin = threading.Thread(name ='stdin', target=self.stdin_loop)
		self.thread_stdin.start()
		if self.inscreen:
			self.keyboard_loop()
		self.thread_stdin.join()

	def __enter__(self):
		self.stdscr = curses.initscr()
		curses.noecho()
		curses.cbreak()
		curses.start_color()
		curses.use_default_colors()
		curses.init_pair(1, curses.COLOR_WHITE, -1)
		self.color_normal = curses.color_pair(1)
		curses.init_pair(2, curses.COLOR_RED, -1)
		self.color_different = curses.color_pair(2)
		curses.init_pair(3, curses.COLOR_YELLOW, -1)
		self.color_linedifferent = curses.color_pair(3)
		self.output_pad = curses.newpad(10000, 1000)
		self.output_pad.keypad(True)
		self.inscreen = True
		self.running = True
		self.lock = threading.Lock()
		self.display_cv = threading.Condition(self.lock)
		self.thread_display = threading.Thread(name ='display', target=self.display_loop)
		self.thread_display.start()
		return self

	def __exit__(self, exc_type, exc_value, traceback):
		curses.nocbreak()
		self.output_pad.keypad(False)
		curses.echo()
		curses.endwin()
		self.inscreen = False
		self.running = False
		with self.lock: self.display_cv.notify()
		self.thread_display.join()

	def generateDiffColors(self, a, b):
		seqm = difflib.SequenceMatcher(None, a, b)
		for opcode, a0, a1, b0, b1 in seqm.get_opcodes():
			if opcode == 'equal':
				yield from [(part, self.color_normal) for part in seqm.a[a0:a1].splitlines(True)]
			elif opcode == 'insert' or opcode == 'replace':
				yield from [(part, self.color_different) for part in seqm.b[b0:b1].splitlines(True)]
			elif opcode == 'delete':
				yield ("", self.color_different)
			else:
				raise ValueError("Unknown opcode %s".format(opcode))

	def groupLines(self, parts):
		"""Groups parts=[(part, color)] into lists where the last part ends with a newline.
		Also replaces color_normal colors with color_linedifferent if any part is not color_normal.
		"""
		line = []
		hasDifference = False
		replaceline = lambda line: list((p[0], self.color_linedifferent if hasDifference and p[1] == self.color_normal else p[1]) for p in line)
		for part in parts:
			if part[1] != self.color_normal:
				hasDifference = True
			if not len(part[0]): continue
			line += [part]
			if part[0][-1] == "\n":
				yield replaceline(line)
				line = []
				hasDifference = False
		yield replaceline(line)

	def update(self):
		self.old_display_index = self.display_index
		if self.inscreen:
			self.output_pad.clear()
		else:
			print("Clearing")
		self.current_pad_lines = 0

		prev = "".join(self.current_page(1)[self.current_pad_lines:])
		cur = "".join(self.current_page()[self.current_pad_lines:])

		print(prev)
		print(cur)

		for line in self.groupLines(self.generateDiffColors(prev, cur)):
			col = 0
			for part, color in line:
				if self.inscreen:
					self.output_pad.addstr(self.current_pad_lines, col, part, color)
					col += len(part)
				else:
					print("Adding: ", repr(part), color)
			self.current_pad_lines += 1
		if self.inscreen:
			self.stdscr.move(0, 0)
			self.stdscr.clrtoeol()
			num_pages = len(self.history)
			self.stdscr.addstr("page %i/%i" % (num_pages - self.display_index, num_pages))
			self.output_pad.refresh(self.scroll, 0, 1, 0, self.height(), self.width())
			self.stdscr.refresh()

	def keyboard_loop(self):
		while self.running:
			char = self.output_pad.getch()
			with self.lock:
				if char == 113 or char == -1: self.running = False
				elif char == curses.KEY_RIGHT: self.display_index = max(self.display_index - 1, 0)
				elif char == curses.KEY_LEFT: self.display_index = min(self.display_index + 1, len(self.history))
				elif char == curses.KEY_UP: self.scroll = max(self.scroll - 1, 0)
				elif char == curses.KEY_DOWN: self.scroll += 1
				self.display_cv.notify()

		# unblock the other thread
		self.input_stream.close()
	
	def display_loop(self):
		while self.running:
			with self.lock:
				self.display_cv.wait()
				if not self.running:
					break
				self.update()

	def stdin_loop(self):
		for line in self.input_stream:
			if self.marker in line:
				self.history += [self.page]
				self.page = []
				if self.display_index > 0:
					self.display_index += 1
				else:
					self.old_display_index += 1
			self.page += [line]
			if self.display_index == 0:
				with self.lock: self.display_cv.notify()

mystdin_fd = os.dup(0)
termin = open("/dev/tty")
os.dup2(termin.fileno(), 0)
mystdin = open(mystdin_fd, 'r')
w = WatchCycles(mystdin, sys.argv[1])
try:
	with w:
		w.run()
except KeyboardInterrupt:
	sys.exit(1)
